CREATE DATABASE CASESTUDY1;
USE CASESTUDY1;

--Problem Statement: You are a database administrator. You want to use the data to answer a few questions about your customers, 
--especially about the sales and profit coming from different states, money spent in marketing and various other factors such as COGS (Cost of Goods Sold), budget profit etc. 
--You plan on using these insights to help find out which items are being sold the most. 
--You have been provided with the sample of the overall customer data due to privacy issues. 
--But you hope that these samples are enough for you to write fully functioning SQL queries to help answer the questions.

SELECT * FROM FACT;
SELECT * FROM LOCATION;
SELECT * FROM PRODUCT;

--1. Display the number of states present in the LocationTable. 

SELECT COUNT(STATE) FROM LOCATION;

SELECT COUNT(DISTINCT STATE) AS NUMBER_OF_STATES FROM LOCATION;

--2. How many products are of regular type?

SELECT COUNT(ProductId) AS TOTAL_PRODUCT FROM PRODUCT
WHERE TYPE = 'REGULAR';

--3. How much spending has been done on marketing of product ID 1?

SELECT SUM(MARKETING) AS TOTAL_MARKETING_FOR_PRODUCT1 FROM FACT
WHERE PRODUCTID = 1;

--4. What is the minimum sales of a product?

SELECT MIN(SALES) AS MINIMUM_SALES_OF_PRODUCT FROM FACT;

--5. Display the max Cost of Good Sold (COGS). 

SELECT MAX(COGS) AS MAXIMUM_COGS FROM FACT;

--6. Display the details of the product where product type is coffee. 

SELECT * FROM PRODUCT
WHERE PRODUCT_TYPE = 'COFFEE';

--7. Display the details where total expenses are greater than 40. 

SELECT * FROM FACT
WHERE TOTAL_EXPENSES > 40;

--8. What is the average sales in area code 719?

SELECT AVG(SALES) AS AVERAGE_SALES_719 FROM FACT
WHERE AREA_CODE = 719;

--9. Find out the total profit generated by Colorado state.

SELECT SUM(PROFIT) AS TOTAL_PROFIT FROM FACT AS F
INNER JOIN LOCATION AS L
ON F.AREA_CODE = L.AREA_CODE
WHERE STATE = 'COLORADO';

SELECT SUM(PROFIT) FROM FACT
WHERE AREA_CODE IN (
SELECT AREA_CODE FROM LOCATION
WHERE STATE = 'COLORADO');

--10. Display the average inventory for each product ID.

SELECT PRODUCTID,AVG(INVENTORY) AVG_LEVEL FROM FACT
GROUP BY PRODUCTID
ORDER BY PRODUCTID;

--11. Display state in a sequential order in a Location Table

SELECT DISTINCT STATE FROM LOCATION
ORDER BY STATE;

--12. Display the average budget of the Product where the average budget
--margin should be greater than 100.

SELECT PRODUCTID,AVG(BUDGET_MARGIN) AS AVG_PRODUCT_BUDGET FROM FACT
GROUP BY PRODUCTID
HAVING AVG(BUDGET_MARGIN) > 100;

--13. What is the total sales done on date 2010-01-01?

SELECT SUM(SALES) AS TOTAL_SALES FROM FACT
WHERE DATE = '2010-01-01';

--14. Display the average total expense of each product ID on an individual date

SELECT DATE,PRODUCTID,AVG(TOTAL_EXPENSES) AS TOTAL_EXPENSES FROM FACT
GROUP BY DATE,PRODUCTID
ORDER BY DATE,PRODUCTID;

--15. Display the table with the following attributes such as date, productID, product_type, product, sales, profit, state, area_code

SELECT F.DATE,F.PRODUCTID,P.PRODUCT_TYPE,P.PRODUCT,F.SALES,F.PROFIT,L.STATE,L.AREA_CODE FROM FACT AS F INNER JOIN
PRODUCT AS P ON F.PRODUCTID = P.PRODUCTID INNER JOIN
LOCATION AS L ON F.AREA_CODE = L.AREA_CODE;

--16. Display the rank without any gap to show the sales wise

SELECT SALES,DENSE_RANK() OVER (ORDER BY SALES DESC) AS RANK FROM FACT;

--17. Find the state wise profit and sales

SELECT STATE,SUM(PROFIT) TOTAL_PROFIT,SUM(SALES) TOTAL_SALES FROM FACT F
INNER JOIN LOCATION L
ON F.AREA_CODE = L.AREA_CODE
GROUP BY STATE;

--18. Find the state wise profit and sales along with the productname

SELECT L.STATE,P.PRODUCT,SUM(PROFIT)TOTAL_PROFIT,SUM(SALES)TOTAL_SALES FROM FACT F
INNER JOIN LOCATION L
ON F.AREA_CODE = L.AREA_CODE INNER JOIN
PRODUCT P ON F.PRODUCTID = P.PRODUCTID
GROUP BY STATE,PRODUCT
ORDER BY STATE,PRODUCT;

--19. If there is an increase in sales of 5%, calculate the increasedsale

SELECT SALES,SALES*1.05 INCREASED_SALES FROM FACT;

--20. Find the maximum profit along with the product ID and product

SELECT F.PRODUCTID,P.PRODUCT_TYPE,MAX(PROFIT) MAX_PROFIT FROM FACT F
INNER JOIN PRODUCT P
ON F.PRODUCTID = P.PRODUCTID
GROUP BY F.PRODUCTID,PRODUCT_TYPE;

--21. Create a stored procedure to fetch the result according to the product type
--from Product Table

CREATE PROCEDURE GETDETAILSBYTYPE(@INPUT VARCHAR (30))
AS
BEGIN
SELECT * FROM PRODUCT
WHERE PRODUCT_TYPE = @INPUT
END

EXEC GETDETAILSBYTYPE'COFFEE'

--22. Write a query by creating a condition in which if the total expenses is less than
--60 then it is a profit or else loss

SELECT Total_Expenses,
IIF (Total_Expenses < 60, 'PROFIT','LOSS') Profit_or_Loss
FROM FACT;

SELECT TOTAL_EXPENSES,
CASE WHEN TOTAL_EXPENSES < 60
THEN 'PROFIT' ELSE 'LOSS'
END AS STATUS
FROM FACT;

--23. Give the total weekly sales value with the date and product ID details. Use
--roll-up to pull the data in hierarchical 

SELECT DATEPART(WEEK,DATE) AS WEEKNUMBER,PRODUCTID,SUM(SALES) AS SALES FROM FACT
GROUP BY DATEPART(WEEK,DATE),PRODUCTID
WITH ROLLUP

--24. Apply union and intersection operator on the tables which consist of
--attribute area code. 

SELECT AREA_CODE FROM FACT
UNION
SELECT AREA_CODE FROM LOCATION

SELECT AREA_CODE FROM FACT
intersect
SELECT AREA_CODE FROM LOCATION


--25. Create a user-defined function for the product table to fetch a particular
--product type based upon the user’s preference. 

CREATE FUNCTION USERS_PRODUCTTYPE(@PRODUCTTYPE VARCHAR (30))
RETURNS TABLE
AS
RETURN
(SELECT * FROM PRODUCT WHERE PRODUCT_TYPE = @PRODUCTTYPE);

SELECT * FROM dbo.USERS_PRODUCTTYPE ('COFFEE')




--26. Change the product type from coffee to tea where product ID is 1 and undo it.

BEGIN TRANSACTION
UPDATE PRODUCT 
SET PRODUCT_TYPE = 'TEA'
WHERE PRODUCTID = 1;
ROLLBACK


--27. Display the date, product ID and sales where total expenses are
--between 100 to 200. 

SELECT DATE,PRODUCTID,SALES FROM FACT
WHERE TOTAL_EXPENSES BETWEEN 100 AND 200;

--28. Delete the records in the Product Table for regular type. 

BEGIN TRANSACTION
DELETE FROM PRODUCT
WHERE TYPE = 'REGULAR';
ROLLBACK


--29. Display the ASCII value of the fifth character from the column Product.

SELECT Product,ASCII(SUBSTRING(Product,5,1)) FROM Product;
